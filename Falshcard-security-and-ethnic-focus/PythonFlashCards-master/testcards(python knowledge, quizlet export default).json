{
    " for num in range(1,5):": "False",
    "!=": "not equal",
    "\"": "Every time you put \" (double-quotes) around a piece of text you have been making a string. A string is how you make something that your program might give to a human. You print strings, save strings to files, send strings to web servers, and many other things.;\n' (single-quotes) also work for this purpose.",
    "\"\"\"": "Use to make a string that needs multiple lines for the string text.",
    "\"\"\" .............\"\"\"": "String for multiple lines of text; can be multi-line comment",
    "\"mutable\"": "can be changed after created",
    "#": "Octothorpe;\nuse for comments on the code, use to disable code;\nplacing a # at the beginning of a line or in the middle of a line tells python to ignore whatever is written on the line after the #",
    "$": "matches the end of a string",
    "%": "Percent: used for modulus.;\n;\nThe modulus operation finds the remainder after division of one number after another.;\n;\nExample: 75 % 4 = 3, because 4 * 18 is 72, with 3 remaining",
    "%=": "Modulus AND. Takes modulus using two operands and assigns the result to left operand;\nA%=B ~ A = A%B",
    "%E": "Floating point exponential format (uppercase)",
    "%F": "Floating point decimal format (UPPERCASE)",
    "%G": "Same as \"E\" if exponent is greater than -4 or less than precision",
    "%X": "Unsigned Hexadecimal (uppercase)",
    "%c": "Single character",
    "%d": "digit",
    "%d, %i": "Signed integer decimal",
    "%e": "Floating point exponential format",
    "%f": "float;\n;\nFloating point decimal format",
    "%g": "Same as \"e\" if exponent is greater than -4 or less than precision",
    "%i": "signed integer decimal",
    "%o": "Signed octal value",
    "%r": "String;\n-converts any python object using repr()",
    "%r is used for...": "debugging and display",
    "%s": "String;\n-Converts any python object using str()",
    "%s is used for": "display",
    "%u": "unsigned decimal",
    "%x": "Signed hexidecimal",
    "''',\"\"\"": "Free-form strings",
    "(a|b|c|)": "matches either a or b or c",
    "(x)": "in general is a remembered group. You can get the value of what matched by using the groups() method of the object returned by re.search",
    "*": "Asterisk: used for miltiplication",
    "**": "exponent",
    "**=": "Exponent AND. Performs exponential calculation on operators and assigns value to left operand.;\nA**=B ~ A = A**B",
    "*=": "Multiply AND. Multiplies left operand by right and assigns product to left operand;\nA*=B ~ A = A*B",
    "+=": "Add AND. Adds right operand to the left and assigns the result to the left.;\nA += B ~ A = A + B",
    ",": "We put a , (comma) at the end of each print line. This is so print doesn't end the line with a newline character and go to the next line",
    "-=": "Subtract AND. Subtracts right operand from left and assigns the result to the left.;\nA-=B ~ A = A - b",
    ".index(item)": "Find the index of an item",
    ".insert(index, item)": "insert a certain item into a list at a certain index",
    ".isalpha()": "is a letter",
    ".lower": "makes lowercase",
    ".read()": "reads the specified file;\nuse by entering at the end of the variable used to specify the file you have 'opened'.",
    ".remove()": "removes items from list",
    ".upper": "makes uppercase",
    "/": "Slash: used for division",
    "// (operator)": "Floor Division. Numbers after the decimal in the quotient are removed;\n- 9//2 = 4",
    "12 ^ 42": "Bitwise XOR, EXCLUSIVE OR;\nTurns bits on if EITHER but not BOTH bits of inputs are turned on;\n0b1010 ^ 0b1101 = 0b0111",
    "5 % 3": "Modulo;;\nremainder of the division;\n5 % 3 = 2 (3 goes into 5 once, remainder 2)",
    "5 << 1": "bitwise left shift;\n-shifts turned on bits to the left;\n0b001 << 1 = 0b010",
    "5 >> 4": "bitwise right shift;\n-shifts turned on bits to the right;\n0b010 >> 1 = 0b001",
    "8 & 5": "bitwise AND;\nTurns on bits turned on in BOTH inputs;\n0b100 & 0b101 = 0b100",
    "9 | 4": "Bitwise OR;\nTurns on bits if turned on in either input;\n0b001 | 0b100 = 0b101",
    "<, <=, >, >=": "less than, less than or equal to, greater than, greater than or equal to",
    "<=": "Less than or equal to",
    "<>": "Value of two operands not equal?;\n-Similar to !=",
    "=": "assigns values from right side operands to left side operand",
    "==": "means equal to",
    ">=": "Greater than or equal",
    "A _____ has no moving parts, and operates faster than a traditional disk drive.": "solid state drive",
    "A disk drive stores data by _______________ encoding it onto a circular disk.": "magnetically",
    "A while-loop is...": "an infinite loop.;\n;\n\"while True\" ~ \"While true is true, run this:\";\nA for-loop is...",
    "A(n) ?? is a special value that marks the end of a sequence of items.": "Sentinel",
    "A(n) ?? structure causes a statement or set of statements to execute repeatedly.": "Repetition",
    "A(n) ?? total is a sum of numbers that accumulates with each iteration of a loop.": "Running",
    "A(n) ?? validation loop is sometimes called an error trap or an error handler.": "Input",
    "A(n) ??-controlled loop causes a statement or set of statements to repeat as long as a condition is true.": "Condition",
    "A(n) _____ structure is a logical design that controls the order in which a set of statements execute.": "control",
    "A(n) _______________ character is a special character that is preceded with a backslash, appearing inside a string literal.": "escape",
    "A(n) _______________ decision structure provides only one alternative path of execution.": "single alternative",
    "A(n) _______________ expression is made up of two or more Boolean expressions.": "compound",
    "A(n) _______________ is a name that represents a value stored in the computer's memory.": "variable",
    "A(n) _______________ is a set of instructions that a computer follows to perform a task.": "program",
    "A(n) _______________ operator determines whether a specific relationship exists between two values.": "relational",
    "A(n) _______________ statement will execute one block of statements if its condition is true, or another block if its condition is false.": "if/else",
    "After the execution of the following statement, the variable price will reference the value _____. price = int(68.549)": "68",
    "After the execution of the following statement, the variable sold will reference the numeric literal value as a(n) _____ data type: sold = 256.752": "float",
    "Boolean Operators": "Order: Not, And, Or",
    "Boolean tests should be..": "...simple. If complex, move calculations to variables earlier in function and use a good name for the variable.",
    "Boolean variable can reference one of two values: _____.": "true or false",
    "Boolean variables are commonly used as _______________ to indicate whether a specific condition exists.": "flags",
    "Cardinal Numbers": "Start at 0",
    "Comparators": "<;\n>;\n<=;\n>=;\n==;\n!=",
    "Conditional Statement: Elif": "short for else if...otherwise, if the following expression is true, do this!",
    "Conditional Statement: Else": "executes some specified code after finding that the original expression was False (or opposite of the if command)",
    "Conditional Statement: if": "if is a conditional statement that executes some specified code after checking if its expression is True.",
    "Control flow statements": "if, for, while",
    "Data type": "The type of data being used. Could be any of those below",
    "Else must have a...": "die function that prints out an error message, in case the else doesn't make sense. Shows errors.",
    "Every if statement must have a(n)...": "else",
    "FOR Loop": "To repeat a commands a set number of times.",
    "False": "Python recognizes True and False as keywords representing the concept of true and false. If you put quotes around them then they are turned into strings and won't work.",
    "Floating Point": "A decimal",
    "Floating Point Number": "any number with a decimal point showing one or more digits behind the decimal point.;\ne. \"4.0\" or \"0.087\"",
    "Formatter": "Placeholders that \"punch out a hole in the code;\n;\n;\n% is the character for this",
    "Function": "Some code that has been grouped together so that it can be reused by \"calling\" the function name. Like a mini-program within a program.",
    "Functions": "1) HEADER def function and add parameters;\n2) add additional \"\"\"COMMENT here\"\"\" that explains the function;\n3)BODY describes procedures the function carries out, is indented",
    "How do I get a number from someone so I can do math?": "That's a little advanced, but try x = int(raw_input()) which gets the number as a string from raw_input() then converts it to an integer using int()",
    "How many characters to a line?": "80 characters",
    "IF Statement": "To test if a condition is true (e.g. if age >17)",
    "In Python, a comma-separated sequence of data items that are enclosed in a set of brackets is called a _____.": "list",
    "In Python, the variable in the for clause is referred to as the _____ because it is the target of an assignment at the beginning of each loop iteration.": "Target Variable",
    "In Python, you would use the ?? statement to write a count-controlled loop.": "For",
    "In _______________ mode, the interpreter reads the contents of a file that contains Python statements and executes each statement.": "script",
    "In a decision structure, the action is _______________ executed because it is performed only when a certain condition is true.": "conditionally",
    "In a print statement, you can set the _____ argument to a space or empty string to stop the output from advancing to a new line.": "end",
    "In flowcharting, the _______________ symbol is used to represent a Boolean expression.": "diamond",
    "Integer": "A whole number",
    "Iteration": "A Repeat or Loop. This is where the code uses \"while\" or \"for\" loops",
    "List/Array": "A list of possible values for a variable. In the fortune teller there was an array of jobs.",
    "Logic error": "An error that means the code will run, but will not do what is expected.",
    "Main memory is commonly known as _______________.": "RAM",
    "Modules": "Python's built-in features are called modules.;\n;\nAlso called \"libraries\" by some programmers.;\n;\nExample speech: \"you want to use the sys module.\"",
    "Multiple Boolean expressions can be combined by using a logical operator to create _____ expressions.": "compound",
    "Never nest if-statements more than..": "..two deep. Try to do one deep (put inside another function).",
    "None": "A special Python value. One use in Python is that it is returned by functions that do not execute a return statement with a return argument.",
    "Order of Conditionals": "1. not;\n2. and;\n3. or",
    "Order of Precedence": "(**), (*,/,%), (+,-)",
    "Ordinal Numbers": "Start at 1; First, second, third",
    "PEDMAS": "Order of operations: parentheses, exponents, multiplication, division, addition, subtraction",
    "PEMDAS": "Order of Operations:;\nMode of Operations:;\nParentheses Exponents Multiplication Division Addition Subtraction",
    "Programs are commonly referred to as": "software",
    "Python provides a special version of a decision structure known as the _______________ statement, which makes the logic of the nested decision structure simpler to write": "if elif else",
    "Python uses _______________ to categorize values in memory.": "data types",
    "Selection": "A choice or decision. This is where the code uses \"If\", \"else\" or \"elif\" to decide what to do.",
    "String": "A text value such as a word or name",
    "Syntax error": "An error in the code that means it will not run. Incorrect spelling of keywords, leaving off speech marks or brackets, not using colons for \"if\" statements.",
    "Syntax to index 2 nested lists?": "list[x][y]",
    "The % symbol is the remainder operator and it is also known as the _______________ operator.": "modulus",
    "The ?? function is a built-in function that generates a list of integer values.": "Range",
    "The Python _______________ is a program that can read Python programming statements and execute them.": "interpreter",
    "The _____ built-in function is used to read a number that has been typed on the keyboard.": "input()",
    "The _____ coding scheme contains a set of 128 numeric codes that are used to represent characters in the computer memory.": "ASCII",
    "The _____ function reads a piece of data that has been entered at the keyboard and returns that piece of data, as a string, back to the program.": "input",
    "The _______________ is the part of a computer that actually runs programs and is the most important component in a computer.": "cpu",
    "The _______________ specifier is a special set of characters that specify how a value should be formatted.": "formatting",
    "The _______________ statement is used to create a decision structure.": "If",
    "The acronym ?? refers to the fact that the computer cannot tell the difference between good data and bad data.": "GIGO",
    "The decision structure that has two possible paths of execution is known as _____.": "double alternative",
    "The disk drive is a secondary storage device that stores data by _____ encoding it onto a spinning circular disk.": "magnetically",
    "The first input operation is called the _____, and its purpose is to get the first input value that will be tested by the validation loop.": "Priming read",
    "The following is an example of an instruction written in which computer language? 10110000": "Machine language",
    "The line continuation character is a _____.": "\\",
    "The logical _______________ operator reverses the truth of a Boolean expression.": "not",
    "The process known as the _____ cycle is used by the CPU to execute instructions in a program.": "fetch-decode-execute",
    "The program development cycle is made up of _____ steps that are repeated until no errors can be found in the program.": "3",
    "The smallest storage location in a computer's memory": "bit",
    "The term _______________ refers to all of the physical devices that a computer is made of.": "hardware",
    "The variable used to keep the running total": "Accumulator",
    "The while loop is known as a(n) ?? loop because it tests conditions before performing an iteration.": "Pretest",
    "Treat if statements like...": "..paragraphs.;\nEach if, elif, and else grouping is like a set of sentences. Put blank lines before and after.",
    "True/False: A better way to repeatedly perform an operation is to write the statements for the task once, and then place the statements in a loop that will repeat the statements as many times as necessary.": "True",
    "True/False: A computer is a single device that performs different types of tasks for its users.": "False",
    "True/False: According to the behavior of integer division, when an integer is divided by an integer, the result will be a float.": "False",
    "True/False: All programs are normally stored in ROM and loaded into RAM as needed for processing.": "False",
    "True/False: An action in a single alternative decision structure is performed only when the condition is true.": "True",
    "True/False: Computer programs typically perform three steps: Input is received, some process is performed on the input, and output is produced.": "True",
    "True/False: Decision structures are also known as selection structures.": "True",
    "True/False: Expressions that are tested by the if statement are called Boolean expressions.": "True",
    "True/False: In Python, an infinite loop usually occurs when the computer accesses the wrong memory address.": "False",
    "True/False: In Python, print statements written on separate lines do not necessarily output on separate lines.": "True",
    "True/False: In a nested loop, the inner loop goes through all of its iterations for every single iteration of an outer loop.": "True",
    "True/False: In flowcharting, the decision structure and the repetition structure both use the diamond symbol to represent the condition that is tested.": "True",
    "True/False: Nested decision structures are one way to test more than one condition.": "True",
    "True/False: Python allows programmers to break a statement into multiple lines.": "True",
    "True/False: Python allows you to compare strings, but it is not case sensitive.": "False",
    "True/False: Python formats all floating-point numbers to two decimal places when outputting using the print statement.": "False",
    "True/False: RAM is a volatile memory used for temporary storage while a program is running.": "True",
    "True/False: Short-circuit evaluation is performed with the not operator.": "False",
    "True/False: The CPU is able to quickly access data stored at any random location in ROM.": "False",
    "True/False: The CPU understands instructions written in a binary machine language.": "True",
    "True/False: The Python language is not sensitive to block structuring of code.": "False",
    "True/False: The Python language uses a compiler, which is a program that both translates and executes the instructions in a high level language.": "False",
    "True/False: The \\t escape character causes the output to skip over to the next horizontal tab.": "True",
    "True/False: The first line in the while loop is referred to as the condition clause.": "True",
    "True/False: The if statement causes one or more statements to execute only when a Boolean expression is true.": "True",
    "True/False: The instruction set for a microprocessor is unique and is typically understood only by the microprocessors of the same brand.": "True",
    "True/False: The integrity of a program's output is only as good as the integrity of its input. For this reason the program should discard input that is invalid and prompt the user to enter correct data.": "True",
    "True/False: The main reason for using secondary storage is to hold data for long periods of time, even when the power supply to the computer is turned off.": "True",
    "True/False: The not operator is a unitary operator and it must be a compound expression.": "False",
    "True/False: To get the total number of iterations of a nested loop, multiply the number of iterations of all the loops.": "True",
    "Variable": "A letter or word for a value that can vary or change",
    "WHILE Loop": "To repeat while a condition is true (e.g. while score < 100)",
    "What does % when printing string": "they allow the variables outside the string to enter into the string",
    "What is not an example of an augmented assignment operator": "<=",
    "What is sys.argv?": "It allows you to input parameters from the command line.",
    "What is the disadvantage of coding in one long sequence structure?": "If parts of the duplicated code have to be corrected, the correction has to be made many times.",
    "What is the encoding technique called that is used to store negative numbers in the computer's memory?": "two's complement",
    "What is the format for the while clause in Python": "while condition : statement",
    "What is the informal language that programmers use to create models of programs that have no syntax rules and are not meant to be compiled or executed?": "pseudocode",
    "What is the largest value that can be stored in one byte?": "255",
    "What is the structure that causes a statement or a set of statements to execute repeatedly?": "Repetition;\nWhen will the following loop terminate?",
    "What symbol is used to mark the beginning and end of a string?": "Quotation",
    "What type of error produces incorrect results but does not prevent the program from running?": "logic",
    "What type of loop structure repeats the code a specific number of times": "Count-controlled loop",
    "What type of loop structure repeats the code based on the value of the Boolean expression": "Condition-controlled loop",
    "What type of volatile memory is usually used only for temporary storage while running a program?": "RAM",
    "What's a dictionary?": "A list of tuples in curly brackets: {\"x:y\"}; x is a key, y is a value; dictionaries are unordered.",
    "What's the difference between = and == in Python?": "= is the assignment operator.;\n== is the equality operator.",
    "When applying the .3f formatting specifier to the following number, 76.15854, the result is _______________.": "76.159",
    "When the + operator is used with two strings, it performs string _______________.": "Concatenation",
    "When using the _____ operator, one or both subexpressions must be true for the compound expression to be true.": "Or",
    "Where does a computer store a program and the data that the program is working with while the program is running?": "Main memory",
    "Which computer language uses short words known as mnemonics for writing programs?": "Assembly",
    "Which logical operators perform short-circuit evaluation?": "or, and",
    "Which mathematical operator is used to raise five to the second power in Python?": "**",
    "Which of the following is considered to be the world's first programmable electronic computer": "ENIAC",
    "Which of the following is not a microprocessor manufacturing company?": "Dell",
    "Which of the following represents an example to calculate the sum of the numbers (accumulator)?": "total += number",
    "Write comments on code ...": "No, you write comments only to explain difficult to understand code or why you did something. Why is usually much more important, and then you try to write the code so that it explains how something is being done on its own. However, sometimes you have to write such nasty code to solve a problem that it does need a comment on every line. In this case it's strictly for you to practice translating code to English.;\nTrue",
    "[:2]": "# Grabs the first two items",
    "\\": "escape; tells python to ignore following character, or puts difficult characters into strings when used with specific *escape sequences*",
    "\\\"": "Double-quote (\")",
    "\\'": "Single Quote (')",
    "\\D": "matches any non-numeric character",
    "\\Uxxxxxxxx": "Character with 32-bit hex value xxxxxxxx (Unicode only)",
    "\\\\": "backslash (\\)",
    "\\a": "ASCII Bell;\n-may cause receiving device to emit a bell or warning of some kind",
    "\\b": "ASCII Backspace (BS);\n- Erases last character printed",
    "\\d": "matches any numeric digit",
    "\\f": "ASCII FormFeed (FF);\n- ASCII Control character. Forces printer to eject current page and continue printing at top of another.",
    "\\n": "ASCII LineFeed (LF);\n- Goes to next line;\n-newline escape",
    "\\ooo": "Character with octal value ooo",
    "\\r": "ASCII Carriage Return (CR);\n- Resets position to beginning of a line of text",
    "\\t": "ASCII Horizontal Tab (TAB);\n- 8 horizontal spaces; tab",
    "\\uxxxx": "Character with 16-bit hex value xxxx (Unicode only)",
    "\\v": "ASCII Vertical Tab (VT);\n- 6 vertical lines; 1 inch",
    "\\xhh": "Character with hex value hh",
    "^": "matches the beginning of a string",
    "_____ is the process of inspecting data that has been input to a program to make sure it is valid before it is used in a computation.": "Input validation",
    "_______________ are notes of explanation that document lines or sections of a program.": "comments",
    "_______________ are small central processing unit chips.": "micro processors",
    "_______________ is a type of memory that can hold data for long periods of time, even when there is no power to the computer.": "secondary storage",
    "abs()": "gives absolute value of that number (distance from zero)",
    "access dictionary values": "list[item]",
    "adding parser options": "parser.add_option('-n, '--new')",
    "after we've added options (in parser)": "(options, args) = parser.parse_args()",
    "algorithm": "A set of specific steps for solving a category of problems",
    "aliases": "Multiple variables that contain references to the same object.",
    "and": "means that both conditions must be true",
    "append()": "Adds input to the end of a list",
    "apropos": "find what man page is appropriate",
    "argument": "a value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.",
    "argv": "the \"argument variable,\" a very standard name in programming, that you will find used in many other languages. This variable holds the arguments you pass to your Python script when you run it.;\n;\nYou know how you type python ex13.py to run the ex13.py file? Well the ex13.py part of the command is called an \"argument.\" What we'll do now is write a script that also accepts arguments.;\n;\nWhat's the difference between argv and raw_input()?;\nThe difference has to do with where the user is required to give input. If they give your script inputs on the command line, then you use argv. If you want them to input using the keyboard while the script is running, then use raw_input().;\n;\nLine 3:;\nscript, first, second, third = argv;\nLine 3 \"unpacks\" argv so that, rather than holding all the arguments, it gets assigned to four variables you can work with: script, first, second, and third. This may look strange, but \"unpack\" is probably the best word to describe what it does. It just says, \"Take whatever is in argv, unpack it, and assign it to all of these variables on the left in order.\" (ex13.py)",
    "as": "if we want to give a module a different alias",
    "assert": "used for debugging purposes",
    "assignment statement": "replaces item in list;\nlist_name[index number] = \"reassignment\"",
    "basic regex syntax": "match = re.search(pattern, text)",
    "bit mask": "variable used to determine if bits are on or off in an input;\n-sort of works like a multiple choice test key;\n-can be used with | to turn bits on if off;\n-use with ^ and 11111111 to flip all bits;\n;\ndef check_bit4(input):;\n mask = 0b1000;\n desired = input & mask;\n if desired > 0:;\n return \"on\";\n return \"off\"",
    "block": "A group of consecutive statements with the same indentation.",
    "boolean": "a data type that is like a light switch. it can only have two values: true, false",
    "boolean expression": "An expression that is either true or false.",
    "boolean function": "A function that returns a Boolean value. The only possible values of the bool type are False and True.",
    "break": "interrupt the (loop) cycle",
    "cat": "print the whole file",
    "cd": "change directory",
    "class": "-way of producing objects with similar attributes and methods.;\n-used to create new user defined objects;\n-an object is an instance of a class",
    "clone": "To create a new object that has the same value as an existing object. Copying a reference to an object creates an alias but doesn't clone the object.",
    "close": "A method/function/command to close the file",
    "close()": "- method flushes unwritten information and closes file object;\n- Not necessary, but important best practice",
    "comment": "in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program",
    "compound data type": "A data type that is itself made up of elements that are themselves values.",
    "concatenation": "combine",
    "conditional statement": "One program structure within another, such as a conditional statement inside a branch of another conditional statement",
    "continue": "used to interrupt the current cycle, without jumping out of the whole cycle. New cycle will begin.",
    "cp": "copy a file or directory",
    "d = {'key1' : 1, 'key2' : 2, 'key3' : 3}": "dictionary **not curly braces",
    "data types": "i.e. numbers and booleans",
    "decrement": "To subtract one from a variable.",
    "def": "used to create a new user defined function",
    "definite iteration": "A loop where we have an upper bound on the number of times the body will be executed. Definite iteration is usually best coded as a for loop",
    "del": "deletes objects",
    "del keyword": "deletes key/value pairs from dict",
    "dictionary": "similar to a list but you access values by looking at a key rather than an index;\n;\nuseful for information using strings and values i.e. phonebook, email databases (passwords, and usernames)",
    "echo": "pint some arguments",
    "element": "One of the values in a list (or other sequence). The bracket operator selects elements of a list.",
    "elif": "stands for else if. if the first test evaluates to False, continues with the next one",
    "else": "optional. Used after elif to catch other cases not provided for.",
    "enumerate()": "gives an index number to each element in a list",
    "env": "look at your environment",
    "evaluate": "To simplify an expression by performing the operations in order to yield a single value.",
    "except": "catches the exception and executes codes",
    "exception": "Raised by the runtime system if something goes wrong while the program is running.",
    "exec": "executes Python code dynamically",
    "exists()": "Returns TRUE if file in argument exists, FALSE if not",
    "exit": "exit the shell",
    "exponent": "**",
    "exponents in python": "**",
    "export": "export/set a new environment variable",
    "file": "A named entity, usually stored on a hard drive, floppy disk, or CD-ROM, that contains a stream of characters.",
    "filter()": "-filters a list for terms that make the function true;\nfilter(function, list);\nfilter(lambda x: x%3 ==0, my_list);\n;\n-for anonymous (throwaway) functions",
    "finally": "is always executed in the end. Used to clean up resources.",
    "find": "find files",
    "float": "A Python data type which stores floating-point numbers. Floating-point numbers are stored internally in two parts: a base and an exponent. When printed in the standard format, they look like decimal numbers",
    "floating point numbers": "-Scientific notation in computers;\n-Allows very large and small numbers using exponents;\n-Made up of:;\n*Significand*: 5, 1.5, -2.001;\n*Exponent*: 2, -2;\n;\n-Put decimal after integers to make floating point;\n1 ~ 1.0",
    "flow of execution": "The order in which statements are executed during a program run.",
    "for": "iterate over items of a collection in order they appear",
    "for loop": "applies function to every item in list;\n;\nfor x in a:;\n print x;\n;\ncan sort functions;\n;\nfor number in my_list;\n print number #prints out every number on its own line",
    "for loops": "\"for x in list_name\" ... applies something to every item in a list",
    "for num in range(2, 9, 2)": "2, 4, 6, 8;\nWhat are the values that the variable num contains through the iterations of the following for loop?",
    "for num in range(4)": "0, 1, 2, 3",
    "format operator": "The % operator takes a format string and a tuple of values and generates a string by inserting the data values into the format string at the appropriate locations.",
    "from": "for importing a specific variable, class or a function from a module",
    "from .... import ....": "imports specific attributes from a module",
    "from sys import argv": "Called an \"import.\";\n;\nThis is how you add features to your script from the Python feature set. Rather than give you all the features at once, Python asks you to say what you plan to use. This keeps your programs small, but it also acts as documentation for other programmers who read your code later.;\n;\nMay access features other than \"argv\"",
    "fruitful function": "A function that returns a value when it is called.",
    "function": "1. Names code like variables name strings/numbers;\n2. Takes arguments the way scripts take argv;\n3. Using 1 and 2, allows for mini-commands",
    "function argument": "passed in for function parameter;\n;\nfunction(argument)",
    "function import": "import a function from a module;\n(from module import function)",
    "function parameter": "Variable name for passed in argment;\n;\ndef function(parameter):",
    "generic import": "ex: import math (import module)",
    "get()": "Returns a value for the given key. If key is not available, returns default of 'none'.",
    "github steps": "1. git status;\n2. git add (adds to staging);\n3. git commit -m \"What you've done\";\n4. git push -u origin master",
    "global": "access variables defined outside functions",
    "global variable": "available everywhere",
    "grep": "find things inside files",
    "high-level language": "A programming language like Python that is designed to be easy for humans to read and write.",
    "hostname": "my computer's network name",
    "how to loop through dictionaries keys": "d = {\"foo\" : \"bar\"};\n;\nfor key in d:;\n print d[key]",
    "if": "Used to determine, which statements are going to be executed",
    "immutable type": "A compound data type whose elements can NOT be assigned new values.",
    "import": "This is how you add features to your script from the Python feature set. Rather than give you all the features at once, Python asks you to say what you plan to use. This keeps your programs small, but it also acts as documentation for other programmers who read your code later.",
    "increment": "Both as a noun and as a verb, increment means to increase by 1.",
    "indentations in python": "mean that there is a code block",
    "index": "the number that each character in a string is assigned",
    "input()": "Assumes input is valid python expression, returns evaluated result",
    "instance variable": "variable only available to one instance of a class",
    "int": "A Python data type that holds positive and negative whole numbers",
    "int()": "Convert a string to an integer;\n;\nint(raw_input(> ))",
    "integer division": "An operation that divides one integer by another and yields an integer. Integer division yields only the whole number of times that the numerator is divisible by the denominator and discards any remainder.",
    "integer vs. float": "integer is a number w/out a decimal; float is a number with a decimal",
    "is": "tests for object identity",
    "items()": "Returns an array of dict key/value pairs",
    "iteration": "To repeat a section of code.",
    "key": "similar to index but uses a string or number",
    "keys()": "Returns an array of dict's keys",
    "keyword": "define the language's syntax rules and structure, and they cannot be used as variable names",
    "lambda": "creates a new anonymous function",
    "len(input)": "Return the number of items from a sequence or characters in a string",
    "len(my_list)": "finds the length of a list",
    "len[2] = 3": "The 2nd term of the list is now equal to 3",
    "less": "page through a file",
    "list comprehension": "Python rules for creating lists intelligently;\n;\ns = [x for x in range(1:51) if x%2 == 0];\n[2, 4, 6, 8, 10, 12, 14, 16, etc]",
    "list slicing": "Way to access elements;\n;\nlist[start:end:stride];\n-stride = count by __'s;\n-any term can be omitted, will be set to default;\n- a negative stride progresses through list backwards",
    "list.append()": "add to a list by typing list_name.append()",
    "list_name.append(\"\")": "appends thing to lists",
    "local variable": "A variable defined inside a function. A local variable can only be used inside its function. Parameters of a function are also a special kind of local variable.",
    "low-level langauge": "A programming language that is designed to be easy for a computer to execute; also called machine language or assembly language",
    "lower()": "converts a string to lowercase",
    "ls": "list directory",
    "man": "read a manual page",
    "max()": "takes largest out of a set of numbers and returns it",
    "member variables": "variables only available to members of certain class",
    "method": "function of an object",
    "min()": "takes smallest out of a set of numbers and returns it",
    "mkdir": "make directory",
    "module": "A file containing definitions and statements;\nintended to be imported by other programs.",
    "modules": "-aka libraries;\n-feature sets you can import into a program",
    "modulo": "%. Returns the remainder from a division.",
    "modulus operator": "%, works on integers (and integer expressions) and gives the remainder when the first number is divided by the second",
    "mutable": "can be changed after created",
    "mutable type": "A compound data type whose elements can be assigned new values.",
    "mv": "move a file or directory",
    "my_list.insert(4, \"cat\")": "Inserts the string \"cat\" at the 4th position in a list",
    "my_list.sort()": "sorts a list from lowest to highest, or alphabetical",
    "my_list[-1]": "gives you the last term in the list",
    "my_list[0:]": "gives you the whole list, starting at the 0 position",
    "my_list[1:3]": "gives you the list starting at the 1st position and ending at the 2nd position",
    "my_list[3:]": "# Grabs the fourth through last items",
    "my_list[:]": "gives you the entire list",
    "nested list": "A list that is itself contained within a list.",
    "nested loop": "A loop inside the body of another loop.",
    "not": "negates a boolean value",
    "open()": "- function opens a file;\n- Required argument is filename;\n- Default access_mode is read(r);\n- Does not return actual content; creates/reads fileObject;\n-",
    "open(argument, 'w')": "Open a file with an extra parameter. Python has several open parameters that open a file different ways",
    "operator": "A special symbol that represents a simple computation like addition, multiplication, or string concatenation.",
    "operators": "special tokens that represent computations like addition, multiplication and division",
    "optparse first command": "import optparse;\n;\nparser = optparse.OptionParser",
    "or": "means one of the conditions must be true",
    "os": "module - OS routines for NT or POSIX",
    "os.path": "Operating system path module: allows many functions to occur on a specified path.;\n;\nEx: os.path exists will return a true or false if a file does or doesn't exist",
    "parameter": "A name used inside a function to refer to the value which was passed to it as an argument.",
    "pass": "does nothing",
    "pixel": "Smallest addressable element of a picture.",
    "pop()": "method removes and returns the last object from a list",
    "popd": "pop directory",
    "print": "A function used in a program or script that causes the Python interpreter to display a value on its output device.",
    "print 'I\\'m ready to begin'": "I'm ready to begin;\nIf value1 is 2.0 and value2 is 12, what is the output of the following command?",
    "print('The path is D:\\\\sample\\\\test.')": "The path is D:\\sample\\test",
    "print(value1 * value2)": "24.0",
    "prompt": "A formatter text that is used to give the user the ability to type in a question",
    "proprioception": "on a robot, internal sensing mechanisms. On a human, a sense of the relative positions of different parts of ones own body.",
    "pushd": "push directory",
    "pwd": "print working dictionary",
    "raise": "create a user defined exception",
    "range()": "Returns a list of numbers from start up to (but not including) stop;\n;\nstart defaults to 0 and step defaults to 1;\nrange(stop);\nrange(start, stop);\nrange(start, stop, step)",
    "raw_Input": "accepts a string, prints it, and then waits for the user to type something and press Enter (or Return).",
    "raw_input": "Pauses the script at the point it shows up, gets the answer from the keyboard, then continues the script.;\n;\nIt is one of python's built-in functions;\n;\nLooks something like:;\nvar = raw_input(\"Enter_Something\");\nWhere \"Enter_Something\" is what the prompt is, asking you to enter some text, and var is where the text is stored;\n;\nRemember the %r in the prompt",
    "raw_input('prompt:')": "Reads a line of input from user and returns as string",
    "raw_input()": "Raw input prompts the user for an input and then turns that input into a string. In between \"(\" and \")\" the programmer writes the prompt that will prompt the user. When you set raw_input() equal to a variable, that variable becomes what the user inputs.",
    "read": "A method/function/command to read the file",
    "read()": "- method reads a string from an open file;\n- fileObject.read([count]);\n- Count = # of bytes to read, reads as much as possible if not given",
    "readline": "A method/function/command to read just one line of a text file",
    "readline()": "Reads one line of text file",
    "recursion": "The process of calling the currently executing function.",
    "return": "exits the function and returns a value",
    "rmdir": "remove directory",
    "robot": "mechanism or an artificial entity that can be guided by automatic controls.",
    "round()": "function rounds floating point numbers;\nround(1.773) = 2",
    "runtime error": "An error that does not occur until the program has started to execute but that prevents the program from continuing.",
    "script": "Will input the name of the script into your code when called",
    "seek()": "move to a new position in file, reads bytes",
    "semantic": "the meaning of a program",
    "semantic error": "An error in a program that makes it do something other than what the programmer intended.",
    "sequence": "A data type that is made up of elements organized linearly, with each element accessed by an integer index.",
    "short circuit evaluation": "When a boolean expression is evaluated the evaluation starts at the left hand expression and proceeds to the right, stopping when it is no longer necessary to evaluate;\nany further to determine the final outcome.",
    "slice": "A copy of part of a sequence specified by a series of indices.",
    "slicing lists": "letters = ['a', 'b', 'c', 'd', 'e'];\nslice = letters[1:3];\nprint slice;\nprint letters;\n;\n**when slicing if you wanted numbers 1 and 2 you would slice [0:2] so the code would include both the index 0 and 1",
    "sort()": "sorts a list from smallest to greatest",
    "sorted()": "Sorts a list from smallest to highest or a string alphabetically;\n;\nsorted(str, reverse=True) <- Sorts backwards",
    "split()": "Method splits a string into separate phrases;\n- Default is to split on whitespace;\n;\nsplit(str, num);\nstr = separator (optional);\nnumb = number of separations (optional)",
    "statement": "instruction that the Python interpreter can execute",
    "str": "converts to a string",
    "string": "A string is a list of characters inside of quotes.;\n;\nStrings can be made of single, double or triple quotes.",
    "string methods": "let you perform specific tasks on strings",
    "strings": "list of characters",
    "sudo": "DANGER! become super use root! DANGER!",
    "syntax": "The structure of a program",
    "syntax error": "An error in a program that makes it impossible to parse \u2014 and therefore impossible to interpret.",
    "sys": "module - contains important objects and functions",
    "token": "basic elements of a language(letters, numbers, symbols)",
    "trace": "To follow the flow of execution of a program by hand, recording the change of state of the variables and any output produced.",
    "traverse": "To repeat an operation on all members of a set from the start to the end.",
    "truncate": "A method/function/command to empty the file. Be careful if you care about the file",
    "truncate()": "Empties the file",
    "try": "specifies exception handlers",
    "tuple": "An immutable sequence of Python objects;\n-Immutable; can't be changed;\n-Similar to list, but can't be modified;\n- Uses (), ends in ;;\n;\ntuple1 = ('word', 1, False);",
    "type conversion": "An explicit function call that takes a value of one type and computes a corresponding value of another type.",
    "type()": "returns what \"type\" of data ex: int, float, str",
    "universal import": "access to all variables and functions in an import without having to type math.function constantly.;\n(from module import *);\n;\ncon: fill your program with a ton of variables and functions and may not link them correctly to the module (your functions and their functions may get confused)",
    "upper()": "converts a string to uppercase",
    "use imported function from module": "ex: math.sqrt() (module.function)",
    "values()": "Returns an array of dict's values",
    "variable": "A variable is something that holds a value that may change. In simplest terms, a variable is just a box that you can put stuff in. You can use variables such as numbers.;\n;\nEx:;\nlucky = 7;\nprint(lucky);\n7",
    "variables": "can only start with a character (not a number)",
    "variables can be reassigned?": "True",
    "while": "controls flow of the program with truth statements. Statements inside the while loop are executed until the expression evaluates false.",
    "while keep_on_going != 999 :": "When keep_on_going refers to a value not equal to 999",
    "whitespace": "separates statements",
    "write(stuff)": "Writes stuff to file",
    "x += y": "ADD AND;\nx = x + y",
    "x*": "matches x zero or more times",
    "x+": "matches x one or more times",
    "x?": "matches an option x character (in other words, it matches an x wero or one times)",
    "xargs": "execute arguments",
    "x{n,m}": "matches an x character at least n times, but not more than m times",
    "yield": "is used with generators",
    "zip()": "Combines two or 3 lists to return all values in for loops",
    "{}.format(something)": "Is the new string.format in Python 3. This is how indexing works: \"My first name is {0} and my last name is {1}. You can call me {0}\".format(\"John\",\"Doe\").",
    "~88": "Bitwise NOT;\nflips all bits in a number;\nfor integers, effectively adds 1 and makes negative"
}